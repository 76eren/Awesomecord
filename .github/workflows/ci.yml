name: Banking Api Release Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  TAG: v${{ github.run_number }}
  IMAGE_BACKEND: awesomecord-backend
  IMAGE_FRONTEND: awesomecord-frontend
  DEPLOYMENT_SERVER_DIRECTORY: ${{ secrets.DEPLOYMENT_SERVER_DIRECTORY }}
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  ENV_DOCKER_COMPOSE: ${{ secrets.ENV_DOCKER_COMPOSE }}
  DOTNET_ENV_PRODUCTION: ${{ secrets.DOTNET_ENV_PRODUCTION }}
  ENV_FRONTEND: ${{ secrets.ENV_FRONTEND }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set lowercase owner
        id: repo
        run: echo "owner_lc=${GITHUB_REPOSITORY_OWNER@L}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: ./Backend/Awesomecord
          file: ./Backend/Awesomecord/API/Dockerfile
          push: true
          provenance: false
          tags: |
            ghcr.io/${{ steps.repo.outputs.owner_lc }}/${{ env.IMAGE_BACKEND }}:${{ env.TAG }}
            ghcr.io/${{ steps.repo.outputs.owner_lc }}/${{ env.IMAGE_BACKEND }}:latest

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./Frontend/awesomecord-front
          file: ./Frontend/awesomecord-front/Dockerfile
          push: true
          provenance: false
          tags: |
            ghcr.io/${{ steps.repo.outputs.owner_lc }}/${{ env.IMAGE_FRONTEND }}:${{ env.TAG }}
            ghcr.io/${{ steps.repo.outputs.owner_lc }}/${{ env.IMAGE_FRONTEND }}:latest

      - name: Upload deploy compose
        uses: actions/upload-artifact@v4
        with:
          name: deploy-compose
          path: docker-compose.deploy.yml

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Download deploy compose
        uses: actions/download-artifact@v4
        with:
          name: deploy-compose
          path: .

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${SERVER_IP}" >> ~/.ssh/known_hosts

      - name: Create directory structure on server
        run: |
          ssh -i ~/.ssh/id_rsa ${SSH_USERNAME}@${SERVER_IP} << 'EOF'
          set -euo pipefail
          mkdir -p "${DEPLOYMENT_SERVER_DIRECTORY}/Frontend/awesomecord-front"
          mkdir -p "${DEPLOYMENT_SERVER_DIRECTORY}/Backend/Awesomecord/API"
          EOF

      - name: Push docker-compose.deploy.yml to server
        run: scp -i ~/.ssh/id_rsa docker-compose.deploy.yml ${SSH_USERNAME}@${SERVER_IP}:"${DEPLOYMENT_SERVER_DIRECTORY}/docker-compose.deploy.yml"

      - name: Write env files on server
        run: |
          ssh -i ~/.ssh/id_rsa ${SSH_USERNAME}@${SERVER_IP} << 'EOF'
          set -euo pipefail

          # root .env for Compose
          cat > "${DEPLOYMENT_SERVER_DIRECTORY}/.env" << 'EOROOT'
          ${ENV_DOCKER_COMPOSE}
          EOROOT

          # frontend .env
          cat > "${DEPLOYMENT_SERVER_DIRECTORY}/Frontend/awesomecord-front/.env" << 'EOFE'
          ${ENV_FRONTEND}
          EOFE

          # backend .env.production
          cat > "${DEPLOYMENT_SERVER_DIRECTORY}/Backend/Awesomecord/API/.env.production" << 'EOBE'
          ${DOTNET_ENV_PRODUCTION}
          EOBE
          EOF

      - name: Pull and run containers on server
        env:
          GH_OWNER: ${{ github.repository_owner }}
        run: |
          ssh -i ~/.ssh/id_rsa ${SSH_USERNAME}@${SERVER_IP} << EOF
          set -euo pipefail
          cd "${DEPLOYMENT_SERVER_DIRECTORY}"
          export TAG="${TAG}"
          export GH_OWNER="${GH_OWNER,,}"

          docker compose -f docker-compose.deploy.yml pull
          docker compose -f docker-compose.deploy.yml up -d
